using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using VRTK;

public class VR_CreatePlayAreaBoxCollider : MonoBehaviour
{
    [SerializeField]
    private bool m_trigger = false;

    private Transform m_playArea = null;

    private BoxCollider m_boxCollider = null;

    protected virtual void Awake()
    {
        VRTK_SDKManager.instance.AddBehaviourToToggleOnLoadedSetupChange(this);
    }

    protected virtual void OnDestroy()
    {
        VRTK_SDKManager.instance.RemoveBehaviourToToggleOnLoadedSetupChange(this);
    }

    private void OnEnable()
    {

        m_playArea = VRTK_DeviceFinder.PlayAreaTransform();
        if (m_playArea != null)
        {
            //var boundSdk = VRTK_SDK_Bridge.GetBoundariesSDK();
            //if (boundSdk != null)
            //{
            //    var verts = boundSdk.GetPlayAreaVertices();
            //    if (verts != null)
            //    {
            //        // TODO
            //        for (int i = 0; i < verts.Length; ++i)
            //        {
            //            Debug.Log(verts[i]);
            //        }
            //        Debug.Log("");
            //    }
            //}

            var container = new GameObject("[Autogenerated][VR_PlayAreaBoxCollider]");
            container.transform.SetParent(m_playArea, false);
            m_boxCollider = container.AddComponent<BoxCollider>();
            m_boxCollider.size = new Vector3(2.5f, 2, 2.5f);
            m_boxCollider.center = new Vector3(0, 1, 0);
            m_boxCollider.isTrigger = m_trigger;
        }
    }

    private void OnDisable()
    {
        if (m_boxCollider != null)
        {
            Destroy(m_boxCollider.gameObject);
        }
    }
}
